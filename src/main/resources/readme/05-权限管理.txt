权限管理三要素：
    用户管理
    角色管理
    资源管理
        用户扮演角色，由系统赋予角色权限能力，用户就有了控制某些资源的能力
BRAC(一种设计思想)
    RBAC是基于角色的访问控制
    概念
        在RBAC中，权限与角色相关联，用户通过扮演适当的角色从而得到这些角色的权限。
        这样管理都是层级相互依赖的，权限赋予给角色，角色又赋予用户，这样的权限设计很清楚，管理起来很方便。
    实质
        RBAC授权实际上是Who 、What 、How 三元组之间的关系，也就是Who 对What 进行How 的操作，
        简单说明就是谁对什么资源做了怎样的操作。

三个主表
    需要实现三个模块
        角色模块
        用户模块
        资源管理模块


一、进入角色表页面
    后端
        controller层
            直接进入ftl页面
    前端
        通过点击事件，跳转到后端对应方法

二、用户增加操作
    (增加的内容为 用户名、邮箱、电话号码)
    后端
        controller层
            接收前端传递的数据，调用service层的方法，将数据传递给service层
        service层
            1、参数校验
                用户名userName 非空且唯一
                邮箱email      非空
                手机号码phone   非空且格式正确
            2、设置属性
                isValid        有效1
                createDate    系统当前时间
                updateDate    更新当前时间
                默认密码        123456 -- MD5加密
            3、执行dao层的增加方法，判断受影响的行数
        dao层
            执行增加方法
    前端
        头部监听事件触发，弹出一个iframe层
        iframe层输入内容，下会有一个确认框和取消框
        确认框绑定事件处理，使用ajax请求传入、接收数据
三、用户更新操作
    后端
        controller层
            接收前端传递的数据，调用service层的方法，将数据传递给service层
        service层
            1、参数校验
                检验用户id      非空并且能够查询出用户信息
                用户名userName  非空且唯一
                在更新时还需要判定用户名与id的对应关系 这是因为在更新时可能没有修改用户名而修改了其他信息
                这个时候若检测唯一性会显示不是唯一
                邮箱email       非空
                手机号码phone    非空且格式正确
            2、设置属性
                updateDate    更新当前时间
            3、执行dao层的更新方法，判断受影响的行数
        dao层
            执行更新方法
四、用户删除操作
    后端
        dao层
            对于单条删除以及批量删除   仅仅是参数的不同而已，故是可以直接使用一个方法的
        service层
            因参数不固定的问题，故这里对于删除传递的参数是以集合来决定的
        controller层
            获取前端传递的数据
    前端
        删除操作分为单条删除以及批量删除
        批量删除会有一个勾选框
        定义参数的问题
            单条：无参数
            多条：把参数接到后面
五、用户的角色信息选择
    绑定
        角色信息映射给用户   角色和用户之间是多对多的关系
        使用用户角色表，找到用户id，再找到角色id。通过两个对应的id来找到每个用户对应的所有角色(以用户表为主表)
